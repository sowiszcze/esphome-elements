esp32:
  board: esp32cam

# https://github.com/raphaelbs/esp32-cam-ai-thinker/blob/master/docs/esp32cam-pin-notes.md
packages:
  base: !include device.base.min.yaml
  logger_off: !include components/logger.disabled-uart.yaml
  hass_time: !include components/general.hass-time.yaml

# https://esphome.io/components/esp32_camera.html#configuration-examples
# https://github.com/raphaelbs/esp32-cam-ai-thinker
# https://hackaday.io/project/168563-7-esp32-cam-example-expanded
esp32_camera:
  id: cam
  name: Camera
  icon: "mdi:webcam"
  external_clock:
    pin: GPIO0
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32
  max_framerate: 15 fps
  idle_framerate: 0.5 fps
  resolution: 800x600
  jpeg_quality: 20
  vertical_flip: false
  horizontal_mirror: false
  contrast: 0
  brightness: 0
  saturation: 0
  aec_mode: auto
  aec2: false
  ae_level: 0
  aec_value: 300
  agc_mode: auto
  agc_value: 0
  agc_gain_ceiling: 2x
  wb_mode: auto

output:
  - platform: ledc
    pin: 4
    id: light_output

light:
  - name: Onboard flash
    output: light_output
    platform: monochromatic
    id: light_flash
    icon: "mdi:flash"
    restore_mode: RESTORE_DEFAULT_OFF

esp32_camera_web_server:
  - port: 8080
    mode: stream
  - port: 8081
    mode: snapshot

# Use esp32_camera.h as a reference for lambda calls
# https://github.com/esphome/esphome/blob/dev/esphome/components/esp32_camera/esp32_camera.h

select:
  - platform: template
    id: resolution_select
    name: Resolution
    icon: "mdi:image-size-select-large"
    optimistic: true
    options:
      - 160x120
      - 176x144
      - 240x176
      - 320x240
      - 400x296
      - 640x480
      - 800x600
      - 1024x768
      - 1280x1024
      - 1600x1200
      - 1920x1080
      - 720x1280
      - 864x1536
      - 2048x1536
      - 2560x1440
      - 2560x1600
      - 1080x1920
      - 2560x1920
    initial_option: 800x600
    on_value:
      then:
        - lambda: !lambda |-
            switch (i) {
              case 0:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_160X120); break;
              case 1:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_176X144); break;
              case 2:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_240X176); break;
              case 3:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_320X240); break;
              case 4:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_400X296); break;
              case 5:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_640X480); break;
              case 6:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_800X600); break;
              case 7:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_1024X768); break;
              case 8:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_1280X1024); break;
              case 9:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_1600X1200); break;
              case 10:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_1920X1080); break;
              case 11:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_720X1280); break;
              case 12:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_864X1536); break;
              case 13:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_2048X1536); break;
              case 14:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_2560X1440); break;
              case 15:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_2560X1600); break;
              case 16:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_1080X1920); break;
              case 17:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_2560X1920); break;
              default:
                id(cam).set_frame_size(esphome::esp32_camera::ESP32CameraFrameSize::ESP32_CAMERA_SIZE_800X600); break;
            }
            id(cam).update_camera_parameters();

number:
  - platform: template
    name: Max framerate
    id: max_framerate_input
    icon: "mdi:camera-burst"
    min_value: 1
    max_value: 30
    step: 1
    optimistic: true
    initial_value: 15
    entity_category: config
    unit_of_measurement: fps
    on_value:
      then:
        - lambda: !lambda |-
            id(cam).set_max_update_interval((uint32_t)(1000 / x));
            id(cam).update_camera_parameters();
  - platform: template
    name: Idle framerate
    id: idle_framerate_input
    icon: "mdi:camera-burst"
    min_value: 0.1
    max_value: 10
    step: 0.1
    optimistic: true
    initial_value: 0.5
    entity_category: config
    unit_of_measurement: fps
    on_value:
      then:
        - lambda: !lambda |-
            id(cam).set_idle_update_interval((uint32_t)(1000 / x));
            id(cam).update_camera_parameters();
  - platform: template
    name: Quality (10 is best)
    id: quality_input
    icon: "mdi:alpha-q-box"
    min_value: 10
    max_value: 63
    step: 1
    optimistic: true
    initial_value: 10
    entity_category: config
    on_value:
      then:
        - lambda: !lambda |-
            id(cam).set_jpeg_quality((uint8_t)x);
            id(cam).update_camera_parameters();
  - platform: template
    name: Contrast
    id: contrast_input
    icon: "mdi:contrast"
    min_value: -2
    max_value: 2
    step: 1
    optimistic: true
    initial_value: 0
    entity_category: config
    on_value:
      then:
        - lambda: !lambda |-
            id(cam).set_contrast((int)x);
            id(cam).update_camera_parameters();
  - platform: template
    name: Brightness
    id: brightness_input
    icon: "mdi:brightness-5"
    min_value: -2
    max_value: 2
    step: 1
    optimistic: true
    initial_value: 0
    entity_category: config
    on_value:
      then:
        - lambda: !lambda |-
            id(cam).set_brightness((int)x);
            id(cam).update_camera_parameters();
  - platform: template
    name: Saturation
    id: saturation_input
    icon: "mdi:palette"
    min_value: -2
    max_value: 2
    step: 1
    optimistic: true
    initial_value: 0
    entity_category: config
    on_value:
      then:
        - lambda: !lambda |-
            id(cam).set_saturation((int)x);
            id(cam).update_camera_parameters();

switch:
  - platform: template
    name: "Horizontal flip"
    id: horizontal_flip_toggle
    icon: "mdi:flip-horizontal"
    optimistic: true
    entity_category: config
    on_turn_on:
      then:
        - lambda: !lambda |-
            id(cam).set_horizontal_mirror(true);
    on_turn_off:
      then:
        - lambda: !lambda |-
            id(cam).set_horizontal_mirror(false);
  - platform: template
    name: "Vertical flip"
    id: vertical_flip_toggle
    icon: "mdi:flip-vertical"
    optimistic: true
    entity_category: config
    on_turn_on:
      then:
        - lambda: !lambda |-
            id(cam).set_vertical_flip(true);
    on_turn_off:
      then:
        - lambda: !lambda |-
            id(cam).set_vertical_flip(false);
